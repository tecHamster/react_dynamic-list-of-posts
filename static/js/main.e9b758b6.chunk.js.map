{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","utils/getUsers.ts","utils/getPosts.ts","index.tsx"],"names":["PostsList","posts","currentPost","selectPost","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","setComments","useState","name","setName","email","setEmail","text","setText","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasTextError","setHasTextError","onSubmit","e","preventDefault","trimmedName","trim","trimmedEmail","trimmedText","res","prev","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","comments","loading","setLoading","hasError","setHasError","creating","setCreating","hasNoComments","length","useEffect","catch","finally","comment","href","filter","item","UserSelector","users","selectedUser","selectUser","isDropdownActive","setIsDropdownActive","dropdown","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","index","App","setUsers","setSelectedUser","setPosts","setCurrentPost","hasNoPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e9b758b6.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  currentPost: Post | null;\n  selectPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  currentPost,\n  selectPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">\n              {post.id}\n            </td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {currentPost !== post ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => selectPost(post)}\n                >\n                  Open\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => selectPost(null)}\n                >\n                  Close\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number | undefined;\n  setComments: (v: (prev: Comment[]) => any) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasTextError, setHasTextError] = useState(false);\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setHasNameError(false);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setHasEmailError(false);\n  };\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n    setHasTextError(false);\n  };\n\n  const handleReset = () => {\n    setHasEmailError(false);\n    setHasNameError(false);\n    setHasTextError(false);\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const trimmedName = name.trim();\n    const trimmedEmail = email.trim();\n    const trimmedText = text.trim();\n\n    if (!trimmedName) {\n      setHasNameError(true);\n    }\n\n    if (!trimmedEmail) {\n      setHasEmailError(true);\n    }\n\n    if (!trimmedText) {\n      setHasTextError(true);\n    }\n\n    if (!postId) {\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      name,\n      email,\n      body: text,\n      postId,\n    };\n\n    client.post<Comment>('/comments', newComment)\n      .then((res) => {\n        setText('');\n        setComments(prev => [...prev, res]);\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': hasNameError,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': hasTextError,\n            })}\n            value={text}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {hasTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  currentPost: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ currentPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [creating, setCreating] = useState(false);\n  const hasNoComments = !loading && !hasError && comments.length === 0;\n\n  useEffect(() => {\n    if (currentPost) {\n      setLoading(true);\n\n      client.get<Comment[]>(`/comments?postId=${currentPost?.id}`)\n        .then(res => setComments(res))\n        .catch(() => setHasError(true))\n        .finally(() => setLoading(false));\n    }\n  }, [currentPost]);\n\n  const handleDelete = (id: number) => {\n    setComments(prev => prev?.filter(item => item.id !== id) || null);\n    client.delete(`/comments/${id}`);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost?.id}: ${currentPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && (\n            <Loader />\n          )}\n\n          {!loading && hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {hasNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!loading && !!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!loading && !creating && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setCreating(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {currentPost && !loading && creating && (\n          <NewCommentForm\n            postId={currentPost?.id}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  selectUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const dropdown = useRef<HTMLDivElement | null>(null);\n\n  const handleClickOutside = (e: MouseEvent) => {\n    if (dropdown.current\n      && !dropdown.current.contains(e.target as Node)) {\n      setIsDropdownActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n      ref={dropdown}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(prev => !prev)}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user, index) => (\n            <a\n              key={user.id}\n              href={`user-${index + 1}`}\n              onClick={(e) => {\n                e.preventDefault();\n                selectUser(user);\n                setIsDropdownActive(false);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user === selectedUser,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { getUsers } from './utils/getUsers';\nimport { getPosts } from './utils/getPosts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\n  const hasNoPosts = !loading && !hasError && !posts.length && selectedUser;\n\n  useEffect(() => {\n    getUsers()\n      .then(res => {\n        setUsers(res);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoading(true);\n\n      getPosts(selectedUser.id)\n        .then(res => {\n          setPosts(res);\n        })\n        .catch(() => {\n          setHasError(true);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && (\n                  <Loader />\n                )}\n\n                {!loading && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {hasNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!loading && !!posts.length && (\n                  <PostsList\n                    posts={posts}\n                    currentPost={currentPost}\n                    selectPost={setCurrentPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': currentPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {currentPost && (\n                <PostDetails\n                  currentPost={currentPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from './fetchClient';\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}